{"version":3,"file":"scramjet.worker.js","sources":["webpack://@mercuryworkshop/scramjet/./src/shared.ts","webpack://@mercuryworkshop/scramjet/./src/worker/error.ts","webpack://@mercuryworkshop/scramjet/./src/worker/fakesw.ts","webpack://@mercuryworkshop/scramjet/./src/worker/fetch.ts","webpack://@mercuryworkshop/scramjet/./src/worker/threadpool.ts","webpack://@mercuryworkshop/scramjet/./node_modules/.pnpm/@webreflection+idb-map@0.3.1/node_modules/@webreflection/idb-map/index.js","webpack://@mercuryworkshop/scramjet/./src/worker/index.ts"],"sourcesContent":["export const {\n\tutil: { BareClient, ScramjetHeaders, BareMuxConnection },\n\turl: { encodeUrl, decodeUrl },\n\trewrite: {\n\t\trewriteCss,\n\t\tunrewriteCss,\n\t\trewriteHtml,\n\t\tunrewriteHtml,\n\t\trewriteSrcset,\n\t\trewriteJs,\n\t\trewriteHeaders,\n\t\trewriteWorkers,\n\t\thtmlRules,\n\t},\n\tCookieStore,\n} = self.$scramjet.shared;\n\nexport const config = self.$scramjet.config;\n","export function errorTemplate(trace: string, fetchedURL: string) {\n\t// turn script into a data URI so we don\"t have to escape any HTML values\n\tconst script = `\n        errorTrace.value = ${JSON.stringify(trace)};\n        fetchedURL.textContent = ${JSON.stringify(fetchedURL)};\n        for (const node of document.querySelectorAll(\"#hostname\")) node.textContent = ${JSON.stringify(\n\t\t\t\t\tlocation.hostname\n\t\t\t\t)};\n        reload.addEventListener(\"click\", () => location.reload());\n        version.textContent = \"0.0.1\";\n    `;\n\n\treturn `<!DOCTYPE html>\n        <html>\n        <head>\n        <meta charset=\"utf-8\" />\n        <title>Error</title>\n        <style>\n        * { background-color: white }\n        </style>\n        </head>\n        <body>\n        <h1 id=\"errorTitle\">Error processing your request</h1>\n        <hr />\n        <p>Failed to load <b id=\"fetchedURL\"></b></p>\n        <p id=\"errorMessage\">Internal Server Error</p>\n        <textarea id=\"errorTrace\" cols=\"40\" rows=\"10\" readonly></textarea>\n        <p>Try:</p>\n        <ul>\n        <li>Checking your internet connection</li>\n        <li>Verifying you entered the correct address</li>\n        <li>Clearing the site data</li>\n        <li>Contacting <b id=\"hostname\"></b>\"s administrator</li>\n        <li>Verify the server isn\"t censored</li>\n        </ul>\n        <p>If you\"re the administrator of <b id=\"hostname\"></b>, try:</p>\n        <ul>\n        <li>Restarting your server</li>\n        <li>Updating Scramjet</li>\n        <li>Troubleshooting the error on the <a href=\"https://github.com/MercuryWorkshop/scramjet\" target=\"_blank\">GitHub repository</a></li>\n        </ul>\n        <button id=\"reload\">Reload</button>\n        <hr />\n        <p><i>Scramjet v<span id=\"version\"></span></i></p>\n        <script src=\"${\n\t\t\t\t\t\"data:application/javascript,\" + encodeURIComponent(script)\n\t\t\t\t}\"></script>\n        </body>\n        </html>\n        `;\n}\n\nexport function renderError(err: unknown, fetchedURL: string) {\n\tconst headers = {\n\t\t\"content-type\": \"text/html\",\n\t};\n\tif (crossOriginIsolated) {\n\t\theaders[\"Cross-Origin-Embedder-Policy\"] = \"require-corp\";\n\t}\n\n\treturn new Response(errorTemplate(String(err), fetchedURL), {\n\t\tstatus: 500,\n\t\theaders: headers,\n\t});\n}\n","import { type MessageW2R, type MessageR2W } from \"../client/swruntime\";\n\nexport class FakeServiceWorker {\n\tsyncToken = 0;\n\tpromises: Record<number, (val?: MessageR2W) => void> = {};\n\tmessageChannel = new MessageChannel();\n\tconnected = false;\n\n\tconstructor(\n\t\tpublic handle: MessagePort,\n\t\tpublic origin: string\n\t) {\n\t\tthis.messageChannel.port1.addEventListener(\"message\", (event) => {\n\t\t\tif (\"scramjet$type\" in event.data) {\n\t\t\t\tif (event.data.scramjet$type === \"init\") {\n\t\t\t\t\tthis.connected = true;\n\t\t\t\t} else {\n\t\t\t\t\tthis.handleMessage(event.data);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tthis.messageChannel.port1.start();\n\n\t\tthis.handle.postMessage(\n\t\t\t{\n\t\t\t\tscramjet$type: \"init\",\n\t\t\t\tscramjet$port: this.messageChannel.port2,\n\t\t\t},\n\t\t\t[this.messageChannel.port2]\n\t\t);\n\t}\n\n\thandleMessage(data: MessageR2W) {\n\t\tconst cb = this.promises[data.scramjet$token];\n\t\tif (cb) {\n\t\t\tcb(data);\n\t\t\tdelete this.promises[data.scramjet$token];\n\t\t}\n\t}\n\n\tasync fetch(request: Request): Promise<Response | false> {\n\t\tconst token = this.syncToken++;\n\n\t\tconst message: MessageW2R = {\n\t\t\tscramjet$type: \"fetch\",\n\t\t\tscramjet$token: token,\n\t\t\tscramjet$request: {\n\t\t\t\turl: request.url,\n\t\t\t\tbody: request.body,\n\t\t\t\theaders: Array.from(request.headers.entries()),\n\t\t\t\tmethod: request.method,\n\t\t\t\tmode: request.mode,\n\t\t\t\tdestinitation: request.destination,\n\t\t\t},\n\t\t};\n\n\t\tconst transfer = request.body ? [request.body] : [];\n\n\t\tthis.handle.postMessage(message, transfer);\n\n\t\tconst { scramjet$response: r } = (await new Promise((resolve) => {\n\t\t\tthis.promises[token] = resolve;\n\t\t})) as MessageR2W;\n\n\t\tif (!r) return false;\n\n\t\treturn new Response(r.body, {\n\t\t\theaders: r.headers,\n\t\t\tstatus: r.status,\n\t\t\tstatusText: r.statusText,\n\t\t});\n\t}\n}\n","import { BareResponseFetch } from \"@mercuryworkshop/bare-mux\";\nimport IDBMap from \"@webreflection/idb-map\";\nimport { ParseResultType } from \"parse-domain\";\nimport { MessageW2C, ScramjetServiceWorker } from \".\";\nimport { renderError } from \"./error\";\nimport { FakeServiceWorker } from \"./fakesw\";\nimport { CookieStore } from \"../shared/cookie\";\nimport {\n\tScramjetHeaders,\n\tdecodeUrl,\n\tencodeUrl,\n\trewriteCss,\n\trewriteHeaders,\n\trewriteHtml,\n\trewriteJs,\n\trewriteWorkers,\n} from \"../shared\";\n\nimport type { URLMeta } from \"../shared/rewriters/url\";\n\nfunction newmeta(url: URL): URLMeta {\n\treturn {\n\t\torigin: url,\n\t\tbase: url,\n\t};\n}\n\nexport async function swfetch(\n\tthis: ScramjetServiceWorker,\n\trequest: Request,\n\tclient: Client | null\n) {\n\tconst urlParam = new URLSearchParams(new URL(request.url).search);\n\n\tif (urlParam.has(\"url\")) {\n\t\treturn Response.redirect(\n\t\t\tencodeUrl(urlParam.get(\"url\"), newmeta(new URL(urlParam.get(\"url\"))))\n\t\t);\n\t}\n\n\ttry {\n\t\tconst requesturl = new URL(request.url);\n\t\tlet workertype = \"\";\n\t\tif (requesturl.searchParams.has(\"type\")) {\n\t\t\tworkertype = requesturl.searchParams.get(\"type\") as string;\n\t\t\trequesturl.searchParams.delete(\"type\");\n\t\t}\n\t\tif (requesturl.searchParams.has(\"dest\")) {\n\t\t\trequesturl.searchParams.delete(\"dest\");\n\t\t}\n\t\tconst url = new URL(decodeUrl(requesturl));\n\n\t\tconst activeWorker: FakeServiceWorker | null = this.serviceWorkers.find(\n\t\t\t(w) => w.origin === url.origin\n\t\t);\n\n\t\tif (\n\t\t\tactiveWorker &&\n\t\t\tactiveWorker.connected &&\n\t\t\turlParam.get(\"from\") !== \"swruntime\"\n\t\t) {\n\t\t\t// TODO: check scope\n\t\t\tconst r = await activeWorker.fetch(request);\n\t\t\tif (r) return r;\n\t\t}\n\t\tif (url.origin == new URL(request.url).origin) {\n\t\t\tthrow new Error(\n\t\t\t\t\"attempted to fetch from same origin - this means the site has obtained a reference to the real origin, aborting\"\n\t\t\t);\n\t\t}\n\n\t\tconst headers = new ScramjetHeaders();\n\t\tfor (const [key, value] of request.headers.entries()) {\n\t\t\theaders.set(key, value);\n\t\t}\n\n\t\tif (\n\t\t\tclient &&\n\t\t\tnew URL(client.url).pathname.startsWith(self.$scramjet.config.prefix)\n\t\t) {\n\t\t\t// TODO: i was against cors emulation but we might actually break stuff if we send full origin/referrer always\n\t\t\tconst url = new URL(decodeUrl(client.url));\n\t\t\tif (url.toString().includes(\"youtube.com\")) {\n\t\t\t\tconsole.log(headers);\n\t\t\t} else {\n\t\t\t\theaders.set(\"Referer\", url.toString());\n\t\t\t\theaders.set(\"Origin\", url.origin);\n\t\t\t}\n\t\t}\n\n\t\tconst cookies = this.cookieStore.getCookies(url, false);\n\n\t\tif (cookies.length) {\n\t\t\theaders.set(\"Cookie\", cookies);\n\t\t}\n\n\t\t// TODO this is wrong somehow\n\t\theaders.set(\"Sec-Fetch-Mode\", \"cors\");\n\t\theaders.set(\"Sec-Fetch-Site\", \"same-origin\");\n\t\theaders.set(\"Sec-Fetch-Dest\", \"empty\");\n\n\t\tconst response: BareResponseFetch = await this.client.fetch(url, {\n\t\t\tmethod: request.method,\n\t\t\tbody: request.body,\n\t\t\theaders: headers.headers,\n\t\t\tcredentials: \"omit\",\n\t\t\tmode: request.mode === \"cors\" ? request.mode : \"same-origin\",\n\t\t\tcache: request.cache,\n\t\t\tredirect: \"manual\",\n\t\t\t//@ts-ignore why the fuck is this not typed mircosoft\n\t\t\tduplex: \"half\",\n\t\t});\n\n\t\treturn await handleResponse(\n\t\t\turl,\n\t\t\tworkertype,\n\t\t\trequest.destination,\n\t\t\tresponse,\n\t\t\tthis.cookieStore,\n\t\t\tclient\n\t\t);\n\t} catch (err) {\n\t\tconsole.error(\"ERROR FROM SERVICE WORKER FETCH\", err);\n\t\tif (![\"document\", \"iframe\"].includes(request.destination))\n\t\t\treturn new Response(undefined, { status: 500 });\n\n\t\treturn renderError(err, decodeUrl(request.url));\n\t}\n}\n\nasync function handleResponse(\n\turl: URL,\n\tworkertype: string,\n\tdestination: RequestDestination,\n\tresponse: BareResponseFetch,\n\tcookieStore: CookieStore,\n\tclient: Client\n): Promise<Response> {\n\tlet responseBody: string | ArrayBuffer | ReadableStream;\n\tconst responseHeaders = rewriteHeaders(response.rawHeaders, newmeta(url));\n\n\tconst maybeHeaders = responseHeaders[\"set-cookie\"] || [];\n\tfor (const cookie in maybeHeaders) {\n\t\tif (client)\n\t\t\tclient.postMessage({\n\t\t\t\tscramjet$type: \"cookie\",\n\t\t\t\tcookie,\n\t\t\t\turl: url.href,\n\t\t\t} as MessageW2C);\n\t}\n\n\tawait cookieStore.setCookies(\n\t\tmaybeHeaders instanceof Array ? maybeHeaders : [maybeHeaders],\n\t\turl\n\t);\n\n\tfor (const header in responseHeaders) {\n\t\t// flatten everything past here\n\t\tif (Array.isArray(responseHeaders[header]))\n\t\t\tresponseHeaders[header] = responseHeaders[header][0];\n\t}\n\n\tif (response.body) {\n\t\tswitch (destination) {\n\t\t\tcase \"iframe\":\n\t\t\tcase \"document\":\n\t\t\t\tif (responseHeaders[\"content-type\"]?.startsWith(\"text/html\")) {\n\t\t\t\t\tresponseBody = rewriteHtml(\n\t\t\t\t\t\tawait response.text(),\n\t\t\t\t\t\tcookieStore,\n\t\t\t\t\t\tnewmeta(url),\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tresponseBody = response.body;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"script\":\n\t\t\t\tresponseBody = rewriteJs(await response.arrayBuffer(), newmeta(url));\n\t\t\t\t// Disable threading for now, it's causing issues.\n\t\t\t\t// responseBody = await this.threadpool.rewriteJs(await responseBody.arrayBuffer(), url.toString());\n\t\t\t\tbreak;\n\t\t\tcase \"style\":\n\t\t\t\tresponseBody = rewriteCss(await response.text(), newmeta(url));\n\t\t\t\tbreak;\n\t\t\tcase \"sharedworker\":\n\t\t\tcase \"worker\":\n\t\t\t\tresponseBody = rewriteWorkers(\n\t\t\t\t\tawait response.arrayBuffer(),\n\t\t\t\t\tworkertype,\n\t\t\t\t\tnewmeta(url)\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tresponseBody = response.body;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t// downloads\n\tif ([\"document\", \"iframe\"].includes(destination)) {\n\t\tconst header = responseHeaders[\"content-disposition\"];\n\n\t\t// validate header and test for filename\n\t\tif (!/\\s*?((inline|attachment);\\s*?)filename=/i.test(header)) {\n\t\t\t// if filename= wasn\"t specified then maybe the remote specified to download this as an attachment?\n\t\t\t// if it\"s invalid then we can still possibly test for the attachment/inline type\n\t\t\tconst type = /^\\s*?attachment/i.test(header) ? \"attachment\" : \"inline\";\n\n\t\t\t// set the filename\n\t\t\tconst [filename] = new URL(response.finalURL).pathname\n\t\t\t\t.split(\"/\")\n\t\t\t\t.slice(-1);\n\n\t\t\tresponseHeaders[\"content-disposition\"] =\n\t\t\t\t`${type}; filename=${JSON.stringify(filename)}`;\n\t\t}\n\t}\n\tif (responseHeaders[\"accept\"] === \"text/event-stream\") {\n\t\tresponseHeaders[\"content-type\"] = \"text/event-stream\";\n\t}\n\n\t// scramjet runtime can use features that permissions-policy blocks\n\tdelete responseHeaders[\"permissions-policy\"];\n\n\tif (\n\t\tcrossOriginIsolated &&\n\t\t[\n\t\t\t\"document\",\n\t\t\t\"iframe\",\n\t\t\t\"worker\",\n\t\t\t\"sharedworker\",\n\t\t\t\"style\",\n\t\t\t\"script\",\n\t\t].includes(destination)\n\t) {\n\t\tresponseHeaders[\"Cross-Origin-Embedder-Policy\"] = \"require-corp\";\n\t\tresponseHeaders[\"Cross-Origin-Opener-Policy\"] = \"same-origin\";\n\t}\n\n\treturn new Response(responseBody, {\n\t\theaders: responseHeaders as HeadersInit,\n\t\tstatus: response.status,\n\t\tstatusText: response.statusText,\n\t});\n}\n","type Thread = {\n\thandle: MessagePort;\n\tready: boolean;\n\tbusy: boolean;\n\tsyncToken: number;\n\tpromises: Map<number, { resolve; reject }>;\n};\n\nexport class ScramjetThreadpool {\n\tthreads: Thread[] = [];\n\tconstructor() {\n\t\tself.addEventListener(\"message\", ({ data }) => {\n\t\t\tif (data.scramjet$type == \"add\") {\n\t\t\t\tthis.spawn(data.handle);\n\t\t\t}\n\t\t});\n\t}\n\n\tspawn(handle) {\n\t\tconst thread = {\n\t\t\thandle,\n\t\t\tready: false,\n\t\t\tbusy: false,\n\t\t\tsyncToken: 0,\n\t\t\tpromises: new Map(),\n\t\t};\n\n\t\tthis.threads.push(thread);\n\n\t\tthread.handle.onmessage = (e) => {\n\t\t\tif (e.data === \"ready\") {\n\t\t\t\tthread.ready = true;\n\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (e.data === \"idle\") {\n\t\t\t\tthread.busy = false;\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { token, result, error } = e.data;\n\t\t\tconst { resolve, reject } = thread.promises.get(token);\n\t\t\tthread.promises.delete(token);\n\n\t\t\tif (error) {\n\t\t\t\treject(error);\n\t\t\t} else {\n\t\t\t\tresolve(result);\n\t\t\t}\n\t\t};\n\n\t\tthread.handle.start();\n\t}\n\n\tpick(): Thread | undefined {\n\t\tconst alive = this.threads.filter((t) => t.ready);\n\t\tconst idle = alive.filter((t) => !t.busy);\n\n\t\t// no threads\n\t\tif (!alive.length) return;\n\n\t\t// there is a thread, but it's busy\n\t\tif (!idle.length) return alive[Math.floor(Math.random() * alive.length)];\n\n\t\t// there's an open thread\n\t\treturn idle[Math.floor(Math.random() * idle.length)];\n\t}\n\n\trun(task: string, args: any[], transferrable: any[]): Promise<any> {\n\t\tconst thread = this.pick();\n\t\tif (!thread) throw new Error(\"No threads available\");\n\t\tthread.busy = true;\n\n\t\tconst token = thread.syncToken++;\n\n\t\t// console.log(\"runthread: dispatching task\", task, \"to thread\", thread, \"of token\", token)\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthread.promises.set(token, { resolve, reject });\n\n\t\t\tthread.handle.postMessage([task, ...args], transferrable);\n\t\t});\n\t}\n\n\tasync rewriteJs(js: ArrayBuffer, origin: string): Promise<string> {\n\t\treturn await this.run(\"rewriteJs\", [js, origin], [js]);\n\t}\n}\n","const { assign } = Object;\n\nconst STORAGE = 'entries';\nconst READONLY = 'readonly';\nconst READWRITE = 'readwrite';\n\n/**\n * @typedef {Object} IDBMapOptions\n * @prop {'strict' | 'relaxed' | 'default'} [durability]\n * @prop {string} [prefix]\n */\n\n/** @typedef {[IDBValidKey, unknown]} IDBMapEntry */\n\n/** @type {IDBMapOptions} */\nconst defaultOptions = { durability: 'default', prefix: 'IDBMap' };\n\n/**\n * @template T\n * @param {{ target: IDBRequest<T> }} event\n * @returns {T}\n */\nconst result = ({ target: { result } }) => result;\n\nexport default class IDBMap extends EventTarget {\n  // Privates\n  /** @type {Promise<IDBDatabase>} */ #db;\n  /** @type {IDBMapOptions} */ #options;\n  /** @type {string} */ #prefix;\n\n  /**\n   * @template T\n   * @param {(store: IDBObjectStore) => IDBRequest<T>} what\n   * @param {'readonly' | 'readwrite'} how\n   * @returns {Promise<T>}\n   */\n  async #transaction(what, how) {\n    const db = await this.#db;\n    const t = db.transaction(STORAGE, how, this.#options);\n    return new Promise((onsuccess, onerror) => assign(\n      what(t.objectStore(STORAGE)),\n      {\n        onsuccess,\n        onerror,\n      }\n    ));\n  }\n\n  /**\n   * @param {string} name\n   * @param {IDBMapOptions} options\n   */\n  constructor(\n    name,\n    {\n      durability = defaultOptions.durability,\n      prefix = defaultOptions.prefix,\n    } = defaultOptions\n  ) {\n    super();\n    this.#prefix = prefix;\n    this.#options = { durability };\n    this.#db = new Promise((resolve, reject) => {\n      assign(\n        indexedDB.open(`${this.#prefix}/${name}`),\n        {\n          onupgradeneeded({ target: { result, transaction } }) {\n            if (!result.objectStoreNames.length)\n              result.createObjectStore(STORAGE);\n            transaction.oncomplete = () => resolve(result);\n          },\n          onsuccess(event) {\n            resolve(result(event));\n          },\n          onerror(event) {\n            reject(event);\n            this.dispatchEvent(event);\n          },\n        },\n      );\n    }).then(result => {\n      const boundDispatch = this.dispatchEvent.bind(this);\n      for (const key in result) {\n        if (key.startsWith('on'))\n          result[key] = boundDispatch;\n      }\n      return result;\n    });\n  }\n\n  // EventTarget Forwards\n  /**\n   * @param {Event} event\n   * @returns \n   */\n  dispatchEvent(event) {\n    const { type, message, isTrusted } = event;\n    return super.dispatchEvent(\n      // avoid re-dispatching of the same event\n      isTrusted ?\n        assign(new Event(type), { message }) :\n        event\n    );\n  }\n\n  // IDBDatabase Forwards\n  async close() {\n    (await this.#db).close();\n  }\n\n  // Map async API\n  get size() {\n    return this.#transaction(\n      store => store.count(),\n      READONLY,\n    ).then(result);\n  }\n\n  async clear() {\n    await this.#transaction(\n      store => store.clear(),\n      READWRITE,\n    );\n  }\n\n  /**\n   * @param {IDBValidKey} key\n   */\n  async delete(key) {\n    await this.#transaction(\n      store => store.delete(key),\n      READWRITE,\n    );\n  }\n\n  /**\n   * @returns {Promise<IDBMapEntry[]>}\n   */\n  async entries() {\n    const keys = await this.keys();\n    return Promise.all(keys.map(key => this.get(key).then(value => [key, value])));\n  }\n\n  /**\n   * @param {(unknown, IDBValidKey, IDBMap) => void} callback\n   * @param {unknown} [context]\n   */\n  async forEach(callback, context = this) {\n    for (const [key, value] of await this.entries())\n      await callback.call(context, value, key, this);\n  }\n\n  /**\n   * @param {IDBValidKey} key\n   * @returns {Promise<unknown | undefined>}\n   */\n  async get(key) {\n    const value = await this.#transaction(\n      store => store.get(key),\n      READONLY,\n    ).then(result);\n    return value;\n  }\n\n  /**\n   * @param {IDBValidKey} key\n   */\n  async has(key) {\n    const k = await this.#transaction(\n      store => store.getKey(key),\n      READONLY,\n    ).then(result);\n    return k !== void 0;\n  }\n\n  async keys() {\n    const keys = await this.#transaction(\n      store => store.getAllKeys(),\n      READONLY,\n    ).then(result);\n    return keys;\n  }\n\n  /**\n   * @param {IDBValidKey} key\n   * @param {unknown} value\n   */\n  async set(key, value) {\n    await this.#transaction(\n      store => store.put(value, key),\n      READWRITE,\n    );\n    return this;\n  }\n\n  async values() {\n    const keys = await this.keys();\n    return Promise.all(keys.map(key => this.get(key)));\n  }\n\n  get [Symbol.toStringTag]() {\n    return this.#prefix;\n  }\n}\n","import IDBMap from \"@webreflection/idb-map\";\nimport { FakeServiceWorker } from \"./fakesw\";\nimport { swfetch } from \"./fetch\";\nimport { ScramjetThreadpool } from \"./threadpool\";\nimport type BareClient from \"@mercuryworkshop/bare-mux\";\nimport { rewriteWorkers } from \"../shared\";\n\nexport class ScramjetServiceWorker {\n\tclient: BareClient;\n\tconfig: typeof self.$scramjet.config;\n\tthreadpool: ScramjetThreadpool;\n\n\tsyncPool: Record<number, (val?: any) => void> = {};\n\tsynctoken = 0;\n\n\tcookieStore = new self.$scramjet.shared.CookieStore();\n\n\tserviceWorkers: FakeServiceWorker[] = [];\n\n\tdataworkerpromises: Record<\n\t\tstring,\n\t\t{ promise: Promise<string>; resolve: (v: string) => void }\n\t> = {};\n\n\tconstructor() {\n\t\tthis.client = new self.$scramjet.shared.util.BareClient();\n\n\t\tthis.threadpool = new ScramjetThreadpool();\n\n\t\taddEventListener(\"message\", ({ data }: { data: MessageC2W }) => {\n\t\t\tif (!(\"scramjet$type\" in data)) return;\n\n\t\t\tif (data.scramjet$type === \"registerServiceWorker\") {\n\t\t\t\tthis.serviceWorkers.push(new FakeServiceWorker(data.port, data.origin));\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (data.scramjet$type === \"cookie\") {\n\t\t\t\tthis.cookieStore.setCookies([data.cookie], new URL(data.url));\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (data.scramjet$type === \"dataworker\") {\n\t\t\t\tif (this.dataworkerpromises[data.id]) {\n\t\t\t\t\tthis.dataworkerpromises[data.id].resolve(data.data);\n\t\t\t\t} else {\n\t\t\t\t\tlet resolve: (v: string) => void;\n\t\t\t\t\tconst promise = new Promise<string>((res) => (resolve = res));\n\t\t\t\t\tthis.dataworkerpromises[data.id] = { promise, resolve };\n\t\t\t\t\tresolve(data.data);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tasync loadConfig() {\n\t\tif (this.config) return;\n\n\t\tconst store = new IDBMap(\"config\", {\n\t\t\tprefix: \"scramjet\",\n\t\t});\n\n\t\tif (store.has(\"config\")) {\n\t\t\tconst config = await store.get(\"config\");\n\t\t\tthis.config = config;\n\t\t\tself.$scramjet.config = config;\n\t\t\tself.$scramjet.codec = self.$scramjet.codecs[config.codec];\n\t\t}\n\t}\n\n\tasync getLocalStorage(): Promise<Record<string, string>> {\n\t\tlet clients = await self.clients.matchAll();\n\t\tclients = clients.filter(\n\t\t\t(client) =>\n\t\t\t\tclient.type === \"window\" &&\n\t\t\t\t!new URL(client.url).pathname.startsWith(this.config.prefix)\n\t\t);\n\n\t\tif (clients.length === 0) throw new Error(\"No clients found\");\n\n\t\tconst token = this.synctoken++;\n\t\tfor (const client of clients) {\n\t\t\tclient.postMessage({\n\t\t\t\tscramjet$type: \"getLocalStorage\",\n\t\t\t\tscramjet$token: token,\n\t\t\t});\n\t\t}\n\n\t\treturn new Promise((resolve) => {\n\t\t\tthis.syncPool[token] = resolve;\n\t\t});\n\t}\n\n\tasync setLocalStorage(data: Record<string, string>): Promise<void> {\n\t\tlet clients = await self.clients.matchAll();\n\t\tclients = clients.filter(\n\t\t\t(client) =>\n\t\t\t\tclient.type === \"window\" &&\n\t\t\t\t!new URL(client.url).pathname.startsWith(this.config.prefix)\n\t\t);\n\n\t\tif (clients.length === 0) throw new Error(\"No clients found\");\n\n\t\tconst token = this.synctoken++;\n\t\tfor (const client of clients) {\n\t\t\tclient.postMessage({\n\t\t\t\tscramjet$type: \"setLocalStorage\",\n\t\t\t\tscramjet$token: token,\n\t\t\t\tdata,\n\t\t\t});\n\t\t}\n\n\t\treturn new Promise((resolve) => {\n\t\t\tthis.syncPool[token] = resolve;\n\t\t});\n\t}\n\n\troute({ request }: FetchEvent) {\n\t\tif (request.url.startsWith(location.origin + this.config.prefix))\n\t\t\treturn true;\n\t\telse return false;\n\t}\n\n\tasync fetch({ request, clientId }: FetchEvent) {\n\t\tif (new URL(request.url).pathname.startsWith(\"/scramjet/worker\")) {\n\t\t\tconst id = new URL(request.url).searchParams.get(\"id\");\n\t\t\tconst type = new URL(request.url).searchParams.get(\"type\");\n\n\t\t\tconst origin = new URL(\n\t\t\t\tdecodeURIComponent(new URL(request.url).searchParams.get(\"origin\"))\n\t\t\t);\n\n\t\t\tlet promise = this.dataworkerpromises[id];\n\t\t\tif (!promise) {\n\t\t\t\tlet resolve: (v: string) => void;\n\t\t\t\tpromise = {\n\t\t\t\t\tpromise: new Promise<string>((res) => (resolve = res)),\n\t\t\t\t\tresolve,\n\t\t\t\t};\n\t\t\t\tpromise.resolve = resolve;\n\t\t\t\tthis.dataworkerpromises[id] = promise;\n\t\t\t}\n\n\t\t\tconst data = await promise.promise;\n\t\t\tdelete this.dataworkerpromises[id];\n\n\t\t\tconst rewritten = rewriteWorkers(data, type, {\n\t\t\t\torigin: new URL(origin),\n\t\t\t\tbase: new URL(origin),\n\t\t\t});\n\n\t\t\tconst headers = {\n\t\t\t\t\"Content-Type\": \"application/javascript\",\n\t\t\t};\n\n\t\t\tif (crossOriginIsolated) {\n\t\t\t\theaders[\"Cross-Origin-Opener-Policy\"] = \"same-origin\";\n\t\t\t\theaders[\"Cross-Origin-Embedder-Policy\"] = \"require-corp\";\n\t\t\t}\n\n\t\t\treturn new Response(rewritten, {\n\t\t\t\theaders,\n\t\t\t});\n\t\t}\n\n\t\tconst client = await self.clients.get(clientId);\n\n\t\treturn swfetch.call(this, request, client);\n\t}\n}\n\nself.ScramjetServiceWorker = ScramjetServiceWorker;\n\ntype RegisterServiceWorkerMessage = {\n\tscramjet$type: \"registerServiceWorker\";\n\tport: MessagePort;\n\torigin: string;\n};\n\ntype CookieMessage = {\n\tscramjet$type: \"cookie\";\n\tcookie: string;\n\turl: string;\n};\n\ntype DataWorkerMessage = {\n\tscramjet$type: \"dataworker\";\n\tdata: string;\n\tid: string;\n};\n\ntype MessageCommon = {\n\tscramjet$type: string;\n\tscramjet$token: number;\n};\n\ntype MessageTypeC2W =\n\t| RegisterServiceWorkerMessage\n\t| CookieMessage\n\t| DataWorkerMessage;\ntype MessageTypeW2C = CookieMessage;\n\n// c2w: client to (service) worker\nexport type MessageC2W = MessageCommon & MessageTypeC2W;\nexport type MessageW2C = MessageCommon & MessageTypeW2C;\n"],"names":["BareClient","ScramjetHeaders","BareMuxConnection","encodeUrl","decodeUrl","rewriteCss","unrewriteCss","rewriteHtml","unrewriteHtml","rewriteSrcset","rewriteJs","rewriteHeaders","rewriteWorkers","htmlRules","CookieStore","self","config","errorTemplate","trace","fetchedURL","script","JSON","location","encodeURIComponent","renderError","err","headers","crossOriginIsolated","Response","String","FakeServiceWorker","handle","origin","MessageChannel","event","data","cb","request","token","message","Array","transfer","r","Promise","resolve","newmeta","url","swfetch","client","urlParam","URLSearchParams","URL","requesturl","workertype","activeWorker","w","Error","key","value","console","cookies","response","handleResponse","undefined","destination","cookieStore","responseBody","responseHeaders","maybeHeaders","cookie","header","type","filename","ScramjetThreadpool","thread","Map","e","result","error","reject","alive","t","idle","Math","task","args","transferrable","js","IDBMap","ScramjetServiceWorker","addEventListener","promise","res","store","clients","clientId","id","decodeURIComponent","rewritten"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAO,MAAM,EACZ,MAAM,EAAEA,UAAU,EAAEC,eAAe,EAAEC,iBAAiB,EAAE,EACxD,KAAK,EAAEC,SAAS,EAAEC,SAAS,EAAE,EAC7B,SAAS,EACRC,UAAU,EACVC,YAAY,EACZC,WAAW,EACXC,aAAa,EACbC,aAAa,EACbC,SAAS,EACTC,cAAc,EACdC,cAAc,EACdC,SAAS,EACT,EACDC,WAAW,EACX,GAAGC,KAAK,SAAS,CAAC,MAAM,CAAC;AAEnB,MAAMC,SAASD,KAAK,SAAS,CAAC,MAAM,CAAC;;;;;;;;;;ACjBrC,SAASE,cAAcC,KAAa,EAAEC,UAAkB;IAC9D,yEAAyE;IACzE,MAAMC,SAAS,CAAC;2BACU,EAAEC,KAAK,SAAS,CAACH,OAAO;iCAClB,EAAEG,KAAK,SAAS,CAACF,YAAY;sFACwB,EAAEE,KAAK,SAAS,CACjGC,SAAS,QAAQ,EAChB;;;IAGF,CAAC;IAEJ,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qBAgCY,EAChB,iCAAiCC,mBAAmBH,QACpD;;;QAGG,CAAC;AACT;AAEO,SAASI,YAAYC,GAAY,EAAEN,UAAkB;IAC3D,MAAMO,UAAU;QACf,gBAAgB;IACjB;IACA,IAAIC,qBAAqB;QACxBD,OAAO,CAAC,+BAA+B,GAAG;IAC3C;IAEA,OAAO,IAAIE,SAASX,cAAcY,OAAOJ,MAAMN,aAAa;QAC3D,QAAQ;QACR,SAASO;IACV;AACD;;;;;;;;;AC9DO,MAAMI;;;IACZ,UAAc;IACd,SAA0D;IAC1D,eAAsC;IACtC,UAAkB;IAElB,YACC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLoC;AAYnB;AAInB,SAASe,QAAQC,GAAQ;IACxB,OAAO;QACN,QAAQA;QACR,MAAMA;IACP;AACD;AAEO,eAAeC,QAErBV,OAAgB,EAChBW,MAAqB;IAErB,MAAMC,WAAW,IAAIC,gBAAgB,IAAIC,IAAId,QAAQ,GAAG,EAAE,MAAM;IAEhE,IAAIY,SAAS,GAAG,CAAC,QAAQ;QACxB,OAAOrB,SAAS,QAAQ,CACvBzB,kDAASA,CAAC8C,SAAS,GAAG,CAAC,QAAQJ,QAAQ,IAAIM,IAAIF,SAAS,GAAG,CAAC;IAE9D;IAEA,IAAI;QACH,MAAMG,aAAa,IAAID,IAAId,QAAQ,GAAG;QACtC,IAAIgB,aAAa;QACjB,IAAID,WAAW,YAAY,CAAC,GAAG,CAAC,SAAS;YACxCC,aAAaD,WAAW,YAAY,CAAC,GAAG,CAAC;YACzCA,WAAW,YAAY,CAAC,MAAM,CAAC;QAChC;QACA,IAAIA,WAAW,YAAY,CAAC,GAAG,CAAC,SAAS;YACxCA,WAAW,YAAY,CAAC,MAAM,CAAC;QAChC;QACA,MAAMN,MAAM,IAAIK,IAAI/C,kDAASA,CAACgD;QAE9B,MAAME,eAAyC,IAAI,CAAC,cAAc,CAAC,IAAI,CACtE,CAACC,IAAMA,EAAE,MAAM,KAAKT,IAAI,MAAM;QAG/B,IACCQ,gBACAA,aAAa,SAAS,IACtBL,SAAS,GAAG,CAAC,YAAY,aACxB;YACD,oBAAoB;YACpB,MAAMP,IAAI,MAAMY,aAAa,KAAK,CAACjB;YACnC,IAAIK,GAAG,OAAOA;QACf;QACA,IAAII,IAAI,MAAM,IAAI,IAAIK,IAAId,QAAQ,GAAG,EAAE,MAAM,EAAE;YAC9C,MAAM,IAAImB,MACT;QAEF;QAEA,MAAM9B,UAAU,IAAIzB,oDAAeA;QACnC,KAAK,MAAM,CAACwD,KAAKC,MAAM,IAAIrB,QAAQ,OAAO,CAAC,OAAO,GAAI;YACrDX,QAAQ,GAAG,CAAC+B,KAAKC;QAClB;QAEA,IACCV,UACA,IAAIG,IAAIH,OAAO,GAAG,EAAE,QAAQ,CAAC,UAAU,CAACjC,KAAK,SAAS,CAAC,MAAM,CAAC,MAAM,GACnE;YACD,8GAA8G;YAC9G,MAAM+B,MAAM,IAAIK,IAAI/C,kDAASA,CAAC4C,OAAO,GAAG;YACxC,IAAIF,IAAI,QAAQ,GAAG,QAAQ,CAAC,gBAAgB;gBAC3Ca,QAAQ,GAAG,CAACjC;YACb,OAAO;gBACNA,QAAQ,GAAG,CAAC,WAAWoB,IAAI,QAAQ;gBACnCpB,QAAQ,GAAG,CAAC,UAAUoB,IAAI,MAAM;YACjC;QACD;QAEA,MAAMc,UAAU,IAAI,CAAC,WAAW,CAAC,UAAU,CAACd,KAAK;QAEjD,IAAIc,QAAQ,MAAM,EAAE;YACnBlC,QAAQ,GAAG,CAAC,UAAUkC;QACvB;QAEA,6BAA6B;QAC7BlC,QAAQ,GAAG,CAAC,kBAAkB;QAC9BA,QAAQ,GAAG,CAAC,kBAAkB;QAC9BA,QAAQ,GAAG,CAAC,kBAAkB;QAE9B,MAAMmC,WAA8B,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAACf,KAAK;YAChE,QAAQT,QAAQ,MAAM;YACtB,MAAMA,QAAQ,IAAI;YAClB,SAASX,QAAQ,OAAO;YACxB,aAAa;YACb,MAAMW,QAAQ,IAAI,KAAK,SAASA,QAAQ,IAAI,GAAG;YAC/C,OAAOA,QAAQ,KAAK;YACpB,UAAU;YACV,qDAAqD;YACrD,QAAQ;QACT;QAEA,OAAO,MAAMyB,eACZhB,KACAO,YACAhB,QAAQ,WAAW,EACnBwB,UACA,IAAI,CAAC,WAAW,EAChBb;IAEF,EAAE,OAAOvB,KAAK;QACbkC,QAAQ,KAAK,CAAC,mCAAmClC;QACjD,IAAI,CAAC;YAAC;YAAY;SAAS,CAAC,QAAQ,CAACY,QAAQ,WAAW,GACvD,OAAO,IAAIT,SAASmC,WAAW;YAAE,QAAQ;QAAI;QAE9C,OAAOvC,mDAAWA,CAACC,KAAKrB,kDAASA,CAACiC,QAAQ,GAAG;IAC9C;AACD;AAEA,eAAeyB,eACdhB,GAAQ,EACRO,UAAkB,EAClBW,WAA+B,EAC/BH,QAA2B,EAC3BI,WAAwB,EACxBjB,MAAc;IAEd,IAAIkB;IACJ,MAAMC,kBAAkBxD,uDAAcA,CAACkD,SAAS,UAAU,EAAEhB,QAAQC;IAEpE,MAAMsB,eAAeD,eAAe,CAAC,aAAa,IAAI,EAAE;IACxD,IAAK,MAAME,UAAUD,aAAc;QAClC,IAAIpB,QACHA,OAAO,WAAW,CAAC;YAClB,eAAe;YACfqB;YACA,KAAKvB,IAAI,IAAI;QACd;IACF;IAEA,MAAMmB,YAAY,UAAU,CAC3BG,wBAAwB5B,QAAQ4B,eAAe;QAACA;KAAa,EAC7DtB;IAGD,IAAK,MAAMwB,UAAUH,gBAAiB;QACrC,+BAA+B;QAC/B,IAAI3B,MAAM,OAAO,CAAC2B,eAAe,CAACG,OAAO,GACxCH,eAAe,CAACG,OAAO,GAAGH,eAAe,CAACG,OAAO,CAAC,EAAE;IACtD;IAEA,IAAIT,SAAS,IAAI,EAAE;QAClB,OAAQG;YACP,KAAK;YACL,KAAK;gBACJ,IAAIG,eAAe,CAAC,eAAe,EAAE,WAAW,cAAc;oBAC7DD,eAAe3D,oDAAWA,CACzB,MAAMsD,SAAS,IAAI,IACnBI,aACApB,QAAQC,MACR;gBAEF,OAAO;oBACNoB,eAAeL,SAAS,IAAI;gBAC7B;gBACA;YACD,KAAK;gBACJK,eAAexD,kDAASA,CAAC,MAAMmD,SAAS,WAAW,IAAIhB,QAAQC;gBAG/D;YACD,KAAK;gBACJoB,eAAe7D,mDAAUA,CAAC,MAAMwD,SAAS,IAAI,IAAIhB,QAAQC;gBACzD;YACD,KAAK;YACL,KAAK;gBACJoB,eAAetD,uDAAcA,CAC5B,MAAMiD,SAAS,WAAW,IAC1BR,YACAR,QAAQC;gBAET;YACD;gBACCoB,eAAeL,SAAS,IAAI;gBAC5B;QACF;IACD;IACA,YAAY;IACZ,IAAI;QAAC;QAAY;KAAS,CAAC,QAAQ,CAACG,cAAc;QACjD,MAAMM,SAASH,eAAe,CAAC,sBAAsB;QAErD,wCAAwC;QACxC,IAAI,CAAC,2CAA2C,IAAI,CAACG,SAAS;YAC7D,mGAAmG;YACnG,iFAAiF;YACjF,MAAMC,OAAO,mBAAmB,IAAI,CAACD,UAAU,eAAe;YAE9D,mBAAmB;YACnB,MAAM,CAACE,SAAS,GAAG,IAAIrB,IAAIU,SAAS,QAAQ,EAAE,QAAQ,CACpD,KAAK,CAAC,KACN,KAAK,CAAC,CAAC;YAETM,eAAe,CAAC,sBAAsB,GACrC,CAAC,EAAEI,KAAK,WAAW,EAAElD,KAAK,SAAS,CAACmD,UAAU,CAAC;QACjD;IACD;IACA,IAAIL,eAAe,CAAC,SAAS,KAAK,qBAAqB;QACtDA,eAAe,CAAC,eAAe,GAAG;IACnC;IAEA,mEAAmE;IACnE,OAAOA,eAAe,CAAC,qBAAqB;IAE5C,IACCxC,uBACA;QACC;QACA;QACA;QACA;QACA;QACA;KACA,CAAC,QAAQ,CAACqC,cACV;QACDG,eAAe,CAAC,+BAA+B,GAAG;QAClDA,eAAe,CAAC,6BAA6B,GAAG;IACjD;IAEA,OAAO,IAAIvC,SAASsC,cAAc;QACjC,SAASC;QACT,QAAQN,SAAS,MAAM;QACvB,YAAYA,SAAS,UAAU;IAChC;AACD;;;;;;;;;AC5OO,MAAMY;IACZ,UAAoB,EAAE,CAAC;IACvB,aAAc;QACb1D,KAAK,gBAAgB,CAAC,WAAW,CAAC,EAAEoB,IAAI,EAAE;YACzC,IAAIA,KAAK,aAAa,IAAI,OAAO;gBAChC,IAAI,CAAC,KAAK,CAACA,KAAK,MAAM;YACvB;QACD;IACD;IAEA,MAAMJ,MAAM,EAAE;QACb,MAAM2C,SAAS;YACd3C;YACA,OAAO;YACP,MAAM;YACN,WAAW;YACX,UAAU,IAAI4C;QACf;QAEA,IAAI,CAAC,OAAO,CAAC,IAAI,CAACD;QAElBA,OAAO,MAAM,CAAC,SAAS,GAAG,CAACE;YAC1B,IAAIA,EAAE,IAAI,KAAK,SAAS;gBACvBF,OAAO,KAAK,GAAG;gBAEf;YACD;YACA,IAAIE,EAAE,IAAI,KAAK,QAAQ;gBACtBF,OAAO,IAAI,GAAG;gBAEd;YACD;YAEA,MAAM,EAAEpC,KAAK,EAAEuC,MAAM,EAAEC,KAAK,EAAE,GAAGF,EAAE,IAAI;YACvC,MAAM,EAAEhC,OAAO,EAAEmC,MAAM,EAAE,GAAGL,OAAO,QAAQ,CAAC,GAAG,CAACpC;YAChDoC,OAAO,QAAQ,CAAC,MAAM,CAACpC;YAEvB,IAAIwC,OAAO;gBACVC,OAAOD;YACR,OAAO;gBACNlC,QAAQiC;YACT;QACD;QAEAH,OAAO,MAAM,CAAC,KAAK;IACpB;IAEA,OAA2B;QAC1B,MAAMM,QAAQ,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAACC,IAAMA,EAAE,KAAK;QAChD,MAAMC,OAAOF,MAAM,MAAM,CAAC,CAACC,IAAM,CAACA,EAAE,IAAI;QAExC,aAAa;QACb,IAAI,CAACD,MAAM,MAAM,EAAE;QAEnB,mCAAmC;QACnC,IAAI,CAACE,KAAK,MAAM,EAAE,OAAOF,KAAK,CAACG,KAAK,KAAK,CAACA,KAAK,MAAM,KAAKH,MAAM,MAAM,EAAE;QAExE,yBAAyB;QACzB,OAAOE,IAAI,CAACC,KAAK,KAAK,CAACA,KAAK,MAAM,KAAKD,KAAK,MAAM,EAAE;IACrD;IAEA,IAAIE,IAAY,EAAEC,IAAW,EAAEC,aAAoB,EAAgB;QAClE,MAAMZ,SAAS,IAAI,CAAC,IAAI;QACxB,IAAI,CAACA,QAAQ,MAAM,IAAIlB,MAAM;QAC7BkB,OAAO,IAAI,GAAG;QAEd,MAAMpC,QAAQoC,OAAO,SAAS;QAE9B,2FAA2F;QAC3F,OAAO,IAAI/B,QAAQ,CAACC,SAASmC;YAC5BL,OAAO,QAAQ,CAAC,GAAG,CAACpC,OAAO;gBAAEM;gBAASmC;YAAO;YAE7CL,OAAO,MAAM,CAAC,WAAW,CAAC;gBAACU;mBAASC;aAAK,EAAEC;QAC5C;IACD;IAEA,MAAM,UAAUC,EAAe,EAAEvD,MAAc,EAAmB;QACjE,OAAO,MAAM,IAAI,CAAC,GAAG,CAAC,aAAa;YAACuD;YAAIvD;SAAO,EAAE;YAACuD;SAAG;IACtD;AACD;;;;;;;;;ACvFA,QAAQ,SAAS;;AAEjB;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB,UAAU,kCAAkC;AAC5C,UAAU,QAAQ;AAClB;;AAEA,cAAc,wBAAwB;;AAEtC,WAAW,eAAe;AAC1B,yBAAyB;;AAEzB;AACA;AACA,aAAa,yBAAyB;AACtC,aAAa;AACb;AACA,kBAAkB,UAAU,UAAU;;AAEvB;AACf;AACA,aAAa,sBAAsB;AACnC,aAAa,eAAe;AAC5B,aAAa,QAAQ;;AAErB;AACA;AACA,aAAa,0CAA0C;AACvD,aAAa,0BAA0B;AACvC,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB,aAAa,eAAe;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,0BAA0B,aAAa,GAAG,KAAK;AAC/C;AACA,4BAA4B,UAAU,uBAAuB;AAC7D;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA,YAAY,2BAA2B;AACvC;AACA;AACA;AACA,kCAAkC,SAAS;AAC3C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,aAAa;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,wCAAwC;AACrD,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,aAAa;AAC1B,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,aAAa;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,aAAa;AAC1B,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3M4C;AACC;AACX;AACgB;AAEP;AAEpC,MAAME;IACZ,OAAmB;IACnB,OAAqC;IACrC,WAA+B;IAE/B,WAAgD,CAAC,EAAE;IACnD,YAAY,EAAE;IAEd,cAAc,IAAI1E,KAAK,SAAS,CAAC,MAAM,CAAC,WAAW,GAAG;IAEtD,iBAAsC,EAAE,CAAC;IAEzC,qBAGI,CAAC,EAAE;IAEP,aAAc;QACb,IAAI,CAAC,MAAM,GAAG,IAAIA,KAAK,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU;QAEvD,IAAI,CAAC,UAAU,GAAG,IAAI0D,2DAAkBA;QAExCiB,iBAAiB,WAAW,CAAC,EAAEvD,IAAI,EAAwB;YAC1D,IAAI,CAAE,oBAAmBA,IAAG,GAAI;YAEhC,IAAIA,KAAK,aAAa,KAAK,yBAAyB;gBACnD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAIL,sDAAiBA,CAACK,KAAK,IAAI,EAAEA,KAAK,MAAM;gBAErE;YACD;YAEA,IAAIA,KAAK,aAAa,KAAK,UAAU;gBACpC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC;oBAACA,KAAK,MAAM;iBAAC,EAAE,IAAIgB,IAAIhB,KAAK,GAAG;gBAE3D;YACD;YAEA,IAAIA,KAAK,aAAa,KAAK,cAAc;gBACxC,IAAI,IAAI,CAAC,kBAAkB,CAACA,KAAK,EAAE,CAAC,EAAE;oBACrC,IAAI,CAAC,kBAAkB,CAACA,KAAK,EAAE,CAAC,CAAC,OAAO,CAACA,KAAK,IAAI;gBACnD,OAAO;oBACN,IAAIS;oBACJ,MAAM+C,UAAU,IAAIhD,QAAgB,CAACiD,MAAShD,UAAUgD;oBACxD,IAAI,CAAC,kBAAkB,CAACzD,KAAK,EAAE,CAAC,GAAG;wBAAEwD;wBAAS/C;oBAAQ;oBACtDA,QAAQT,KAAK,IAAI;gBAClB;YACD;QACD;IACD;IAEA,MAAM,aAAa;QAClB,IAAI,IAAI,CAAC,MAAM,EAAE;QAEjB,MAAM0D,QAAQ,IAAIL,8DAAMA,CAAC,UAAU;YAClC,QAAQ;QACT;QAEA,IAAIK,MAAM,GAAG,CAAC,WAAW;YACxB,MAAM7E,SAAS,MAAM6E,MAAM,GAAG,CAAC;YAC/B,IAAI,CAAC,MAAM,GAAG7E;YACdD,KAAK,SAAS,CAAC,MAAM,GAAGC;YACxBD,KAAK,SAAS,CAAC,KAAK,GAAGA,KAAK,SAAS,CAAC,MAAM,CAACC,OAAO,KAAK,CAAC;QAC3D;IACD;IAEA,MAAM,kBAAmD;QACxD,IAAI8E,UAAU,MAAM/E,KAAK,OAAO,CAAC,QAAQ;QACzC+E,UAAUA,QAAQ,MAAM,CACvB,CAAC9C,SACAA,OAAO,IAAI,KAAK,YAChB,CAAC,IAAIG,IAAIH,OAAO,GAAG,EAAE,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM;QAG7D,IAAI8C,QAAQ,MAAM,KAAK,GAAG,MAAM,IAAItC,MAAM;QAE1C,MAAMlB,QAAQ,IAAI,CAAC,SAAS;QAC5B,KAAK,MAAMU,UAAU8C,QAAS;YAC7B9C,OAAO,WAAW,CAAC;gBAClB,eAAe;gBACf,gBAAgBV;YACjB;QACD;QAEA,OAAO,IAAIK,QAAQ,CAACC;YACnB,IAAI,CAAC,QAAQ,CAACN,MAAM,GAAGM;QACxB;IACD;IAEA,MAAM,gBAAgBT,IAA4B,EAAiB;QAClE,IAAI2D,UAAU,MAAM/E,KAAK,OAAO,CAAC,QAAQ;QACzC+E,UAAUA,QAAQ,MAAM,CACvB,CAAC9C,SACAA,OAAO,IAAI,KAAK,YAChB,CAAC,IAAIG,IAAIH,OAAO,GAAG,EAAE,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM;QAG7D,IAAI8C,QAAQ,MAAM,KAAK,GAAG,MAAM,IAAItC,MAAM;QAE1C,MAAMlB,QAAQ,IAAI,CAAC,SAAS;QAC5B,KAAK,MAAMU,UAAU8C,QAAS;YAC7B9C,OAAO,WAAW,CAAC;gBAClB,eAAe;gBACf,gBAAgBV;gBAChBH;YACD;QACD;QAEA,OAAO,IAAIQ,QAAQ,CAACC;YACnB,IAAI,CAAC,QAAQ,CAACN,MAAM,GAAGM;QACxB;IACD;IAEA,MAAM,EAAEP,OAAO,EAAc,EAAE;QAC9B,IAAIA,QAAQ,GAAG,CAAC,UAAU,CAACf,SAAS,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,GAC9D,OAAO;aACH,OAAO;IACb;IAEA,MAAM,MAAM,EAAEe,OAAO,EAAE0D,QAAQ,EAAc,EAAE;QAC9C,IAAI,IAAI5C,IAAId,QAAQ,GAAG,EAAE,QAAQ,CAAC,UAAU,CAAC,qBAAqB;YACjE,MAAM2D,KAAK,IAAI7C,IAAId,QAAQ,GAAG,EAAE,YAAY,CAAC,GAAG,CAAC;YACjD,MAAMkC,OAAO,IAAIpB,IAAId,QAAQ,GAAG,EAAE,YAAY,CAAC,GAAG,CAAC;YAEnD,MAAML,SAAS,IAAImB,IAClB8C,mBAAmB,IAAI9C,IAAId,QAAQ,GAAG,EAAE,YAAY,CAAC,GAAG,CAAC;YAG1D,IAAIsD,UAAU,IAAI,CAAC,kBAAkB,CAACK,GAAG;YACzC,IAAI,CAACL,SAAS;gBACb,IAAI/C;gBACJ+C,UAAU;oBACT,SAAS,IAAIhD,QAAgB,CAACiD,MAAShD,UAAUgD;oBACjDhD;gBACD;gBACA+C,QAAQ,OAAO,GAAG/C;gBAClB,IAAI,CAAC,kBAAkB,CAACoD,GAAG,GAAGL;YAC/B;YAEA,MAAMxD,OAAO,MAAMwD,QAAQ,OAAO;YAClC,OAAO,IAAI,CAAC,kBAAkB,CAACK,GAAG;YAElC,MAAME,YAAYtF,uDAAcA,CAACuB,MAAMoC,MAAM;gBAC5C,QAAQ,IAAIpB,IAAInB;gBAChB,MAAM,IAAImB,IAAInB;YACf;YAEA,MAAMN,UAAU;gBACf,gBAAgB;YACjB;YAEA,IAAIC,qBAAqB;gBACxBD,OAAO,CAAC,6BAA6B,GAAG;gBACxCA,OAAO,CAAC,+BAA+B,GAAG;YAC3C;YAEA,OAAO,IAAIE,SAASsE,WAAW;gBAC9BxE;YACD;QACD;QAEA,MAAMsB,SAAS,MAAMjC,KAAK,OAAO,CAAC,GAAG,CAACgF;QAEtC,OAAOhD,gDAAY,CAAC,IAAI,EAAEV,SAASW;IACpC;AACD;AAEAjC,KAAK,qBAAqB,GAAG0E"}